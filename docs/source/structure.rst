.. _structure:

Structure
=========

Project consists of a standard structure which includes:

.. code:: bash

    # RiotKit-Do directory, where you can define custom tasks, there are also temporary files and logs stored (ADVANCED)
    .rkd

    # docker-compose YAML files with definitions of containers, networks and volumes
    apps/conf/
    apps/conf.dev/   # this specific one is considered only on local development environment

    # Service profiles that allows to select services on which you operate in given command (eg. wordpress profile = all instances of wordpress)
    apps/profile/

    # RiotKit's InfraCheck integration, here are placed all of the healthcheck definitions
    # (see section about health and monitoring)
    apps/healthchecks/

    # GIT repositories definitions (see section about applications from external GIT repositories)
    apps/repos-enabled/
    apps/www-data/

    # configuration data mounted via bind-mount to inside containers (should be read-only and versioned by GIT)
    containers/

    # dynamic data mounted via bind-mount to inside containers (eg. generated certificates, anything that is generated by containers)
    data/

    # scripts that are executed at given time in the Harbor lifecycle (eg. pre-start, post-start, pre-upgrade, ...)
    hooks.d/
    hooks.d/pre-upgrade
    hooks.d/(...)
    hooks.d/post-start


Keeping standards
-----------------

*KISS - keep it simple stupid*

By keeping standards in your project you make sure, that any person that joins your project or a contributor could be satisfied
with Harbor documentation. Any outstanding solutions would require you to create extra documentation in your project.

